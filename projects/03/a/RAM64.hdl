// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Select which RAM to use
    DMux8Way    (in=true, sel=address[3..5], a=da, b=db, c=dc, d=dd, e=de, f=df, g=dg, h=dh);
    
    // Get load signals for each RAM
    And         (a=load, b=da, out=ada);
    And         (a=load, b=db, out=adb);
    And         (a=load, b=dc, out=adc);
    And         (a=load, b=dd, out=add);
    And         (a=load, b=de, out=ade);
    And         (a=load, b=df, out=adf);
    And         (a=load, b=dg, out=adg);
    And         (a=load, b=dh, out=adh);

    // Declare RAMs
    RAM8        (in=in, load=ada, address=address[0..2], out=a);
    RAM8        (in=in, load=adb, address=address[0..2], out=b);
    RAM8        (in=in, load=adc, address=address[0..2], out=c);
    RAM8        (in=in, load=add, address=address[0..2], out=d);
    RAM8        (in=in, load=ade, address=address[0..2], out=e);
    RAM8        (in=in, load=adf, address=address[0..2], out=f);
    RAM8        (in=in, load=adg, address=address[0..2], out=g);
    RAM8        (in=in, load=adh, address=address[0..2], out=h);

    // Set output
    Mux8Way16   (a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h, sel=address[3..5], out=out);
}